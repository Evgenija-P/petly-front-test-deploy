{"version":3,"file":"static/js/733.118ba09d.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.js","pages/Login.js"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { media, colors, fontWeights } from '../../styles/stylesLayout';\r\nimport { Form, Field } from 'formik';\r\n\r\nimport mobileBackground from '../../img/Auth/bg-auth-mobile.png';\r\nimport tabletBackground from '../../img/Auth/bg-auth-tablet.png';\r\nimport desktopBackground from '../../img/Auth/bg-auth-desctop.png';\r\n\r\nexport const Container = styled.div`\r\n  padding-top: 42px;\r\n\r\n  background-image: url(${mobileBackground});\r\n  background-position: center bottom;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  height: calc(100vh - 68px);\r\n\r\n  ${media.tablet} {\r\n    padding-top: 204px;\r\n\r\n    background-image: url(${tabletBackground});\r\n    height: calc(100vh - 71px);\r\n  }\r\n\r\n  ${media.desktop} {\r\n    padding-top: 80px;\r\n\r\n    background-image: url(${desktopBackground});\r\n  }\r\n`;\r\n\r\nexport const FormLogin = styled(Form)`\r\n  width: 280px;\r\n\r\n  padding-inline: 0px;\r\n  padding-bottom: 0px;\r\n\r\n  background-color: transparent;\r\n  margin-inline: auto;\r\n  box-sizing: border-box;\r\n\r\n  ${media.tablet} {\r\n    width: 608px;\r\n\r\n    padding: 60px 80px 40px 80px;\r\n\r\n    background-color: ${colors.white};\r\n    border-radius: 40px;\r\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\r\n  }\r\n\r\n  ${media.desktop} {\r\n    width: 618px;\r\n\r\n    padding: 60px 80px;\r\n\r\n    background-color: ${colors.white};\r\n    border-radius: 40px;\r\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  margin-bottom: 40px;\r\n\r\n  font-family: 'Manrope';\r\n  font-weight: ${fontWeights.bold};\r\n  font-size: 24px;\r\n  line-height: 1.4;\r\n  letter-spacing: 0.04em;\r\n\r\n  align-items: center;\r\n  text-align: center;\r\n\r\n  color: ${colors.black};\r\n\r\n  ${media.tablet} {\r\n    font-weight: ${fontWeights.medium};\r\n    font-size: 36px;\r\n  }\r\n`;\r\n\r\nexport const FieldLogin = styled.div`\r\n  margin-bottom: 16px;\r\n  position: relative;\r\n`;\r\nexport const FieldPass = styled.div`\r\n  margin-bottom: 40px;\r\n  position: relative;\r\n`;\r\n\r\nexport const FieldWrap = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const Input = styled(Field)`\r\n  box-sizing: border-box;\r\n\r\n  width: 100%;\r\n\r\n  height: 40px;\r\n  padding: 11px 14px;\r\n\r\n  font-family: 'Manrope';\r\n  font-weight: ${fontWeights.regular};\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  align-items: center;\r\n  letter-spacing: 0.04em;\r\n\r\n  color: ${colors.black};\r\n\r\n  background: transparent;\r\n  border: 1px solid rgba(245, 146, 86, 0.5);\r\n\r\n  border-radius: 40px;\r\n\r\n  &::placeholder {\r\n    font-style: normal;\r\n    font-weight: ${fontWeights.regular};\r\n    font-size: 14px;\r\n    line-height: 1.36;\r\n    letter-spacing: 0.04em;\r\n    color: ${colors.gray};\r\n  }\r\n\r\n  :hover,\r\n  :focus {\r\n    border: 2px solid ${colors.accent};\r\n    outline: 0;\r\n  }\r\n\r\n  ${media.tabletAndDesktop} {\r\n    height: 52px;\r\n    padding: 14px 32px;\r\n\r\n    font-size: 18px;\r\n    line-height: 1.38;\r\n\r\n    background: ${colors.background};\r\n\r\n    &::placeholder {\r\n      font-style: normal;\r\n      font-weight: ${fontWeights.regular};\r\n      font-size: 18px;\r\n      line-height: 1.38;\r\n      letter-spacing: 0.04em;\r\n      color: ${colors.gray};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ShowPassword = styled.span`\r\n  display: inline-block;\r\n  position: absolute;\r\n  width: 16px;\r\n  height: 16px;\r\n  right: 14px;\r\n\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n\r\n  color: grey;\r\n  cursor: pointer;\r\n  svg {\r\n    width: inherit;\r\n    height: inherit;\r\n  }\r\n\r\n  ${media.tabletAndDesktop} {\r\n    width: 22px;\r\n    height: 22px;\r\n    right: 32px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  box-sizing: border-box;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n\r\n  width: 280px;\r\n  height: 44px;\r\n\r\n  padding: 10px 28px;\r\n  margin-bottom: 40px;\r\n\r\n  border: none;\r\n  border-radius: 40px;\r\n\r\n  color: ${colors.white};\r\n  background-color: ${colors.accent};\r\n\r\n  cursor: pointer;\r\n\r\n  font-family: 'Manrope';\r\n  font-weight: ${fontWeights.medium};\r\n  font-size: 20px;\r\n  line-height: 1.35px;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: 0.04em;\r\n\r\n  transform: scale(1);\r\n  transition: transform 0.5s;\r\n  position: relative;\r\n  overflow-x: hidden;\r\n  overflow-y: hidden;\r\n\r\n  :hover,\r\n  :focus {\r\n    transform: scale(1.05);\r\n    transition: transform 0.5s;\r\n  }\r\n  :hover:before {\r\n    left: 100%;\r\n  }\r\n\r\n  :before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: -100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: ${colors.gradient};\r\n    transition: all 450ms;\r\n  }\r\n\r\n  ${media.tabletAndDesktop} {\r\n    width: 458px;\r\n  }\r\n\r\n  ${media.desktop} {\r\n    height: 48px;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  box-sizing: border-box;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  font-family: 'Manrope';\r\n  font-style: normal;\r\n  font-weight: ${fontWeights.regular};\r\n  font-size: 12px;\r\n  line-height: 1.33;\r\n  letter-spacing: 0.04em;\r\n\r\n  color: ${colors.gray};\r\n`;\r\n\r\nexport const Link = styled(NavLink)`\r\n  display: inline-block;\r\n  color: ${colors.blue};\r\n  text-decoration: none;\r\n`;\r\n\r\nexport const ErrorText = styled.div`\r\n  position: absolute;\r\n\r\n  font-family: 'Manrope';\r\n  font-size: 12px;\r\n  font-style: italic;\r\n\r\n  line-height: 1.4;\r\n  letter-spacing: 0.03em;\r\n\r\n  color: #e53e3e;\r\n\r\n  white-space: nowrap;\r\n  bottom: -16px;\r\n  left: 12px;\r\n\r\n  ${media.tabletAndDesktop} {\r\n    left: 32px;\r\n  }\r\n`;\r\n","import { Formik, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n// import Spinner from '../Spinner';\r\nimport {\r\n  useDispatch,\r\n  // useSelector\r\n} from 'react-redux';\r\n// import {\r\n//   selectIsRefreshing,\r\n//   selectIsLoading,\r\n// } from '../../redux/auth/selectors';\r\n// import { toast } from 'react-toastify';\r\nimport { logIn } from '../../redux/auth/operations';\r\n\r\nimport {\r\n  Container,\r\n  FormLogin,\r\n  FieldLogin,\r\n  FieldPass,\r\n  Title,\r\n  Input,\r\n  Button,\r\n  Text,\r\n  Link,\r\n  ErrorText,\r\n} from './LoginForm.styled';\r\n\r\nconst regexPassword = /^\\S*$/;\r\n\r\nconst loginSchema = yup.object().shape({\r\n  email: yup.string().email('Invalid email adress').required('Required'),\r\n  password: yup\r\n    .string()\r\n    .min(7, 'Password must be at least 7 characters')\r\n    .max(32, 'Password must be at most 32 characters')\r\n    .matches(regexPassword, 'Must not contain spaces')\r\n    .required('Required'),\r\n});\r\n\r\nconst FormError = ({ name }) => {\r\n  return (\r\n    <ErrorMessage\r\n      name={name}\r\n      render={message => <ErrorText>{message}</ErrorText>}\r\n    />\r\n  );\r\n};\r\n\r\nconst LoginForm = () => {\r\n  // const isRefreshing = useSelector(selectIsRefreshing);\r\n  // const isLoading = useSelector(selectIsLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  const handleSubmit = async (values, actions) => {\r\n    const { resetForm } = actions;\r\n    const form = { email: values.email, password: values.password };\r\n    const { error } = await dispatch(logIn(form));\r\n\r\n    if (!error) {\r\n      resetForm();\r\n    }\r\n\r\n    console.log(values);\r\n    //  console.log(actions)\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={loginSchema}\r\n      >\r\n        <FormLogin autoComplete=\"on\">\r\n          <Title>Login</Title>\r\n          <FieldLogin>\r\n            <label htmlFor=\"email\">\r\n              <Input\r\n                id=\"loginEmail\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n              />\r\n              <FormError name=\"email\" />\r\n            </label>\r\n          </FieldLogin>\r\n\r\n          <FieldPass>\r\n            <label htmlFor=\"password\">\r\n              <Input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n              <FormError name=\"password\" />\r\n            </label>\r\n          </FieldPass>\r\n\r\n          <Button type=\"submit\">Login</Button>\r\n          <Text>\r\n            <span>\r\n              Don't have an account? <Link to=\"/register\">Register</Link>\r\n            </span>\r\n          </Text>\r\n        </FormLogin>\r\n      </Formik>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n\r\n// {<>\r\n//   {isLoading ? (\r\n//     <Spinner />\r\n//   ) : (\r\n//     <Container>\r\n//       <Title>Login</Title>\r\n//       <Formik\r\n//         initialValues={initialValues}\r\n//         onSubmit={handleSubmit}\r\n//         validationSchema={loginSchema}\r\n//       >\r\n//         <Form autoComplete=\"on\">\r\n//           <FieldLogin>\r\n//             <label htmlFor=\"email\">\r\n//               <Input\r\n//                 id=\"loginEmail\"\r\n//                 type=\"email\"\r\n//                 name=\"email\"\r\n//                 placeholder=\"Email\"\r\n//               />\r\n//               <FormError name=\"email\" />\r\n//             </label>\r\n//           </FieldLogin>\r\n\r\n//           <FieldPass>\r\n//             <label htmlFor=\"password\">\r\n//               <Input\r\n//                 id=\"password\"\r\n//                 type=\"password\"\r\n//                 name=\"password\"\r\n//                 placeholder=\"Password\"\r\n//               />\r\n//               <FormError name=\"password\" />\r\n//             </label>\r\n//           </FieldPass>\r\n\r\n//           <Button type=\"submit\">Login</Button>\r\n//           <Text>\r\n//             <span>\r\n//               Don't have an account? <Link to=\"/register\">Register</Link>\r\n//             </span>\r\n//           </Text>\r\n//         </Form>\r\n//       </Formik>\r\n//     </Container>\r\n//   )}\r\n// </>}\r\n","import { Helmet } from 'react-helmet';\r\nimport LoginForm from '../components/LoginForm';\r\n\r\nconst Login = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Login</title>\r\n      </Helmet>\r\n      <LoginForm />\r\n    </>\r\n  );\r\n};\r\nexport default Login;\r\n"],"names":["Container","styled","mobileBackground","media","tabletBackground","desktopBackground","FormLogin","Form","colors","Title","fontWeights","FieldLogin","FieldPass","Input","Field","Button","Text","Link","NavLink","ErrorText","loginSchema","yup","shape","email","required","password","min","max","matches","FormError","name","render","message","dispatch","useDispatch","handleSubmit","values","actions","resetForm","form","logIn","error","console","log","initialValues","onSubmit","validationSchema","autoComplete","htmlFor","id","type","placeholder","to","Helmet"],"sourceRoot":""}